:isInteger
   Return isInteger[1] ~= "^[0-9]+$"
:factorial
   If factorial[1]=0 OR factorial[1]=1
      Return 1
   Else
      Return factorial[1] * $(factorial (factorial[1] - 1))
# TAG sections have higher priority than native functions, using the same name as a native function will "override" it.
# It is still possible to call the native function using the classic Function(p1, p2, p3, ...) syntax which is exclusive to these
:repeat
   For repeat[1]
      Set string = (string . repeat[2])
   Return string
:mean
   Set total = mean.MaxIndex()
   Set sum = 0
   For KEY VALUE in mean
      Set sum = (sum + VALUE)
   Return sum/total
:mean_by_spaces
   Set n = 0
   Set sum = 0
   For KEY VALUE in $(StrSplit mean_by_spaces[1] " ")
      If VALUE!=""
         Set sum = (sum + VALUE)
         n++
   # It is also possible to use the classic Function(p, p2, p3, ...) notation ONLY for native functions (Not TAG sections)
   Return Round(sum/n, 2)
:main
  If $(isInteger 6.7)
     Msg with "Is an integer!"
  Msg "Factorial" With "The factorial of 6 is $(Factorial 6)"
  Msg "Mean" With "The mean of 5, 6, 7.15 is--->$(Mean 5 6 7.15)"
  Msg "Mean from Input" With "The mean of the numbers entered is--->$(Mean_by_spaces $(Input "Enter numbers separated by spaces:"))"
  Set ANY = $(Input "Enter any word:")
  Msg "Result" With $(Repeat $(Input "How many times do you want to repeat [%ANY%]?\n\nEnter a number:") ANY)
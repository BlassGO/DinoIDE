:MultiOption
	# The GUI identifier: new
	#    1. Ensures to always create a clean GUI, so no need to use -> Gui "new: Destroy"
	# 	 2. Is used by all native DinoCode functions that use GUI such as Option/Input
	#		This ensures that a Submit of the information is ALWAYS made even if the window is closed manually by the user
	Gui "new: +AlwaysOnTop"
	Gui "new: Font, s10"
	If MultiOption.2
	   Gui "new: Add, Text, Y+0, %MultiOption.2%"
	For count value in WITH
       if count=1
	      Gui "new: Add, Radio, vMultiOption XP Y+10, %value%"
	   else
          Gui  "new: Add, Radio, , %value%"
   # newGuiClose -> Native function in DinoCode that submits the information and closes any GUI window with "new" identifier
   Gui "new: Add, Button, XS Y+10 h20 w100 gnewGuiClose vokay default, OK"
   Gui "new: Show, AutoSize Center, %MultiOption.1%  "
   # newGuiSize -> Native function in DinoCode that returns an Object with Weight and Height of the last "new" GUI window
   #               Dimensions are only updated when the window is displayed or resized
   #                  W = Weight
   #                  H = Height
   Set Dimens = $(newGuiSize)
   # (Width of GUI client area - Width of button) // 2
   Set CenterX = ((Dimens.W - 100) // 2)
   # Update the position of the button linked to: vokay
   GuiControl "new: Move, okay, x%CenterX%"
   # Set the GUI as the last detected window
   Gui "new: +LastFound"
   # If a window is not specified, the last detected window will be used: WinExist(), +LastFound
   WaitWindow
   # Any GUI Variable (vVAR or hwndVAR) exists only within the Gui function
   # To obtain the content you must use -> Gui "Return VAR"
   Return $(Gui "Return MultiOption")
:MAIN

    Msg "RESULT" with $(MultiOption "ole" "Something-----------" with "ole" "huh" "ole" "huh" "ole" "huh" "ole" "huh" "ole" "huh" "ole" "huh" "ole" "huh")
    
    
    
    

:MAIN
	# Change the default escape character, for greater convenience in directorys: from \ to `
    Escape `

    # Create an OBJECT Directory
    Set dir = $(New Directory with "TestFolder")
    dir.Delete()
    dir.Create()

    # Create a SubFolder
    dir.CreateSub("SubFolder")

    #######################################################################
    # THIS PART DOES NOT CORRESPOND to the Directory Library, but to the File Library.
    # If you want a more detailed description of the File Library, review the example corresponding to this
    # Some files will be created in the directory so that the following examples with the Directory Library are more complete.
    Set file = $(New File with "TestFolder\test.txt" "UTF-8")
    file.Create()
    Set file.path = "TestFolder\test2.txt"
    file.Create()
    Set file.path = "TestFolder\test3.txt"
    Set file.content = "  BlassGO!  "
    Set file.path = "TestFolder\SubFolder\test4.txt"
    file.Create()
    Set file =
    #######################################################################


    # The Find(name,mode,limit,partial) method allows to find for files/folders by name
    #    name = The name of the file/folder
    #    mode = F (Files), D (Directories), R (Recursive) - By default all 3 are included
    #    limit = The maximum number of results allowed - By default, all
    #    partial = True (Consider name as a substring of Real name), False (By default)

    Msg "FIND" with dir.Find("test4.txt")

    # Using partial name, just recursively find the first file that matches
    Msg "FIND - File - Recursive - By Partial Name" with dir.Find(".txt", "FR" , 1, True)


    # The FindStr(str,str2,mode,limit) method allows you to search for text patterns within readable files.
    #    str = First text pattern to search for. If it is only enough that within the file(s) there is a line that contains the text pattern
    #    str2 = Second text pattern to search for. If it is necessary that within the file(s) there is a section that starts on a line with the First text pattern until another line that contains this Second text pattern        
    #    mode = F (Files), D (Directories), R (Recursive) - By default all 3 are included
    #    limit = The maximum number of results allowed - By default, all
    #
    # The File library is MANDATORY to use this method
    Msg "FIND STRING" with dir.FindStr("Blass")


    # The Items() method creates an Object that will contain in detail each current file/folder in the Directory. By default, there is no subfolder recursion
    For KEY ANY in dir.Items()
        > PROPERTIES
            NAME:            %ANY.Name%
            DIR:  			  %ANY.Dir%
            EXT:  		      %ANY.Ext%
            PATH: 			  %ANY.Path%
            IsFolder:        %ANY.IsFolder%
            ATTRIB:          %ANY.Attrib%
            Size:            %ANY.Size%
            SizeKB:          %ANY.SizeKB%
            SizeMB:          %ANY.SizeMB%
            TimeModified:    %ANY.TimeModified%
            TimeCreated:     %ANY.TimeCreated%
            TimeAccessed:    %ANY.TimeAccessed%
        If ANY.IsFolder
            Msg "FOLDER" with PROPERTIES
        Else
            Msg "FILE" with PROPERTIES

    # Like the previous methods, it is possible to filter files/folders.
    # It is also possible to use recursion but generally it is not necessary to obtain so much accumulated information
    For KEY FOLDER in dir.Items("D")
        Print "Folder with name: %FOLDER.Name%, Size: %FOLDER.Size%"

    Set dir =
    WaitConsole


:MAIN
   #----------------------------BASIC------------------------------#
   
   # Change the default escape character, for greater convenience in directorys: from \ to `
   Escape `

   # Create an OBJECT Directory
   Set dir = $(New Directory)

   # Define the directory path
   Set dir.path = "TestFolder"
   
   # This deletes the entire directory. Doesn't work if the directory name is actually an existing FILE
   dir.Delete()

   # This deletes indiscriminately. That is, if the directory name is that of an existing file, it will delete the file or directory
   # dir.DeleteAny()
   
   # The Create() method only ensures the creation of the directory. If it already exists, it will not be overwritten.
   dir.Create()

   # Check the existence of the directory
   if dir.Exist()
      Msg "CHECK" with "The directory exists!"
   Else
      Msg "CHECK" with "Cannot create directory!"
      Abort
   #######################################################################
   # THIS PART DOES NOT CORRESPOND to the Directory Library, but to the File Library.
   # If you want a more detailed description of the File Library, review the example corresponding to this
   # Some files will be created in the directory so that the following examples with the Directory Library are more complete.
   Set dir2 = $(New Directory with "TestFolder\SubFolder")
   dir2.Create()
   Set file = $(New File with "TestFolder\test.txt")
   Set file.encoding = "UTF-8"
   file.Create()
   Set file.path = "TestFolder\test2.txt"
   file.Create()
   Set file.path = "TestFolder\test3.txt"
   Set file.content = "  BlassGO!  "
   Set file.path = "TestFolder\SubFolder\test4.txt"
   file.Create()
   Set dir2 =
   Set file =
   #######################################################################

   # Returns the number of existing folders/files
   # No recursion into subfolders
   Set COUNT = dir.Count()
   Msg "COUNT" with "There are %COUNT% folders/files"
   
   # It is possible to filter folders or files
   Set COUNT = dir.Count("F")
   Msg "COUNT" with "There are %COUNT% files"

   Set COUNT = dir.Count("D")
   Msg "COUNT" with "There are %COUNT% folders"

   # It is also possible to enable the "R" recursion in subfolders
   Set COUNT = dir.Count("FDR")
   Msg "COUNT" with "There are %COUNT% folders/files including those in subfolders"



   # The Content() method returns a list (STRING) separating each existing path in the directory with a Unix line break (\N)
   # No recursion into subfolders
   Msg "CONTENTS" with dir.Content()

   # As with the Count() method, it is possible to filter or expand the results
   Msg "CONTENS - Only files - Recursive" with dir.Content("FR")



   # The CopyHere() method allows you to copy a folder or file to the current directory
   dir.CopyHere("TestFolder\SubFolder\test4.txt")
   
   # The MoveHere() method allows you to move a file or folder to the current directory
   # In reality, depending on the case, temporarily changing "dir.path" may be more optimal, but to avoid confusion it was preferred to create a new Directory Object            
   Set dir_2 = $(New Directory with "TestFolder\SubFolder")
   dir_2.MoveHere("TestFolder\test2.txt")
   Set dir_2 =



   # The Find(name,mode,limit,partial) method allows to find for files/folders by name
   #    name = The name of the file/folder
   #    mode = F (Files), D (Directories), R (Recursive) - By default all 3 are included
   #    limit = The maximum number of results allowed - By default, all
   #    partial = True (Consider name as a substring of Real name), False (By default)

   Msg "FIND" with dir.Find("test4.txt")

   # Using partial name, just recursively find the first file that matches
   Msg "FIND - File - Recursive - By Partial Name" with dir.Find(".txt", "FR" , 1, True)

   
   # The FindStr(str,str2,mode,limit) method allows you to search for text patterns within readable files.
   #    str = First text pattern to search for. If it is only enough that within the file(s) there is a line that contains the text pattern
   #    str2 = Second text pattern to search for. If it is necessary that within the file(s) there is a section that starts on a line with the First text pattern until another line that contains this Second text pattern        
   #    mode = F (Files), D (Directories), R (Recursive) - By default all 3 are included
   #    limit = The maximum number of results allowed - By default, all
   #
   # The File library is MANDATORY to use this method
   Msg "FIND STRING" with dir.FindStr("Blass")




   # The Items() method creates an Object that will contain in detail each current file/folder in the Directory. By default, there is no subfolder recursion
   For KEY ANY in dir.Items()
       > PROPERTIES
         NAME:            %ANY.Name%
         DIR:  			  %ANY.Dir%
         EXT:  		      %ANY.Ext%
         PATH: 			  %ANY.Path%
         IsFolder:        %ANY.IsFolder%
         ATTRIB:          %ANY.Attrib%
         Size:            %ANY.Size%
         SizeKB:          %ANY.SizeKB%
         SizeMB:          %ANY.SizeMB%
         TimeModified:    %ANY.TimeModified%
         TimeCreated:     %ANY.TimeCreated%
         TimeAccessed:    %ANY.TimeAccessed%
       If ANY.IsFolder
          Msg "FOLDER" with PROPERTIES
       Else
          Msg "FILE" with PROPERTIES

   # Like the previous methods, it is possible to filter files/folders.
   # It is also possible to use recursion but generally it is not necessary to obtain so much accumulated information
   For KEY FOLDER in dir.Items("D")
       Print "Folder with name: %FOLDER.Name%, Size: %FOLDER.Size%"
   
   Set dir =
   WaitConsole


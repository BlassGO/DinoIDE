# APK/JAR Patch using AutoIMG Library

:TO_LOG
   # general_log is a AutoIMG native variable
   # This function ensures that the first parameter is written to the AutoIMG log
   WriteFile general_log TO_LOG[1]

:LOAD_FRAMEWORK
   # Get the device framework and installs it so that Apktool can use it when decoding content
   Msg "Framework" with "Select the framework-res.apk to use"
   Set framework = $(SelectFile "Select the framework-res.apk to use" with "*.apk")
   If framework
      # Installing framework-res.apk
      Print ">> Framework: Installing..."
      to_log $(apktool if "%framework%")
      Print ">> Framework: Done"
   Else
      Msg "ERROR" with "--> Cant get framework-res.apk"
      Abort

:MAIN
   # Change the default escape character, for greater convenience in file paths: from \ to `
   Escape `
   
   # Initialize AutoIMG dependencies
   AutoIMG_Set "apktool = tools\apktool.jar" "general_log = Project.log"
   
   Print "--------------------------------------------------------------"
   Print " APK PATCH                      "
   Print "--------------------------------------------------------------"
   Print

   LOAD_FRAMEWORK
   
   # Save multiline content in a variable
   > DUMMY_METHOD
     .registers 5
     return-void
   
   Msg "APK/JAR" with "Select some APK/JAR"

   Set FILE = $(SelectFile "Select some APK/JAR" with "*.apk;*.jar")

   If FILE
      Set DIR = $(dirname FILE)
      Set NAME = $(basename FILE)
      Set EXT = $(extname FILE)
      Set SIMPLENAME = $(simplename FILE)
      
      Set DEST = (DIR . "\" . SIMPLENAME)
      Set RESULT = (DIR . "\" . SIMPLENAME . "-patched." . EXT)
      
      CreateDir DEST
      Print ">> Decompiling %NAME%..."
      
      # It is important to clarify that functions like "smali_kit\apktool\sign\zipalign\ls" use a unique syntax that facilitates the sending of parameters but does not support using direct references to Variables
      # That is why you need to use the variable with % % expressions within a string ("%FILE%")
      to_log $(apktool --no-res -f d "%FILE%" -o "%DEST%")
      
      # The Native AutoIMG Variable "exitcode" stores the last exit or error code of any command that use Windows CMD
      # exitcode = 0           --> Sucess
      # exitcode = 1 or more   --> There was some error
      If (exitcode=0)
         Print ">> Decompiled successfully"
      Else
         Msg "ERROR" with "--> There was a problem decompiling the JAR/APK"
         Abort
      Print ">> Patching..."
      If $(smali_kit -check -method "setTrialExpiredPackage" -remake "%DUMMY_METHOD%" -d "%DEST%")
         Set Patched = True
      If $(smali_kit -check -method "setAlarm" -remake "%DUMMY_METHOD%" -d "%DEST%")
         Set Patched = True
      
      # Check if any patch was applied
      If Patched
         Print ">> Patched successfully"
         Delete RESULT
         to_log $(apktool b "%DEST%" -o "%RESULT%")
         if $(FileExist RESULT)
            Print ">> Recompiled successfully"
            # Some CMD commands have special syntax (/select,"file") that is overridden by use of run_cmd_literal
            # For those special cases run_cmd is preferred
            run_cmd "explorer.exe /select,""%RESULT%"""
            
            # By default the console does not stop the script flow, wait until the console is closed manually
            WaitConsole
         Else
            Msg "ERROR" With "--> Cant recompile, check the LOG!"
      Else
         Msg "HUH" With "No applicable patch found"
         Abort ">> Can't find anything to patch"
   Else
      Msg "ERROR" With "--> Please select something!"

Exit

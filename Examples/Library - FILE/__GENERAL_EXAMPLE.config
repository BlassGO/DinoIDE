:MAIN
   #----------------------------BASIC------------------------------#

   # Create an OBJECT File
   set file = $(New File)

   # Define the file path and the encoding you want to work with
   Set file.path = "test.txt"
   Set file.encoding = "UTF-8"  # With BOM

   # The assignment in the "content" property is resolved by replacing the entire content of the file or if it is necessary to create this file
   Set file.content = "First line\nSecond line\nThird line"

   #The Create() method only ensures the creation of the file. If it already exists, it will not be overwritten.
   # file.Create()
   
   # The Delete() method deletes the file. Doesn't work if the file name is an existing Folder
   # file.Delete()

   # This deletes indiscriminately. That is, if the file name is that of an existing directory, it will delete the directory or file
   # file.DeleteAny()
   
   # Check file existence
   if file.Exist()
      Msg "CHECK" with "The file exists!"
   Else
      Msg "CHECK" with "Cannot create file!"
      Abort

   # If you only want to add new content (without replacing the file)
   file.Write("\nFourth line\n")

   # If you want to add new lines (they include the line break character by default)
   file.WriteLine("Fifth line")

   # It is possible to change the line break character
   # In DinoCode:
   #    \N = Simple linebreak (Unix)  -  By Default in the Library
   #    \n = \r\N (Windows)
   Set file.linebreak = "\n"
   file.WriteLine("Sixth line")
   
   # Add content before a line that matches the pattern
   file.WriteBefore("Third ", "ADDED BEFORE Third")
   
   # Add content after a line that matches the pattern
   file.WriteAfter("Third ", "ADDED AFTER Third")

   # When the "path" property is retrieved it returns the full resolved path
   Msg "PATH" with file.path 
   
   # Get the total number of lines
   Set COUNT = file.Count()
   Msg "COUNT" with "There are %COUNT% lines"

   # Get the third line
   Msg "LINE" with file.Line(3)

   # Get the lines from the third to the fifth
   Msg "LINES" with file.Lines(3, 5)

   # Find the line that contains "Fourth "
   Msg "MATCHED" with file.Grep("Fourth ")
   
   # Extract a section of lines from a line that contains the first pattern, to another that contains the second
   Msg "SECTION" with file.Grep("Fourth ", "Sixth ")

   # By default the Grep method only obtains the first result, if you want all the matches use GrepAll
   Msg "ALL MATCHES" with file.GrepAll("F")

   # Replace all text matches with another, returns the number of replacements made
   Set NUMBER = file.Replace("line", "NEW TEXT")

   Msg "REPLACE" with "%NUMBER% replacements were made"

   # It is possible to limit the number of replacements
   # Only the first match will be replaced
   file.Replace("NEW TEXT", "Just Me", 1)

   # When the "content" property is retrieved it returns all the contents of the file
   Msg "CONTENT" with file.content

   # Clean the OBJECT
   Set file =



   #----------------------------ADVANCED------------------------------#

   # Direct way to set a file
   Set file = $(New File with "test.txt")

   # Without BOM. No byte order mark is written when a new file is created.
   # It is important to note that when you want to avoid the Windows BOM in any file generated/patched by this Library, you should always use UTF-8-RAW.
   # Otherwise, the BOM in generated files will always be persistent.
   # More info in -> https://www.autohotkey.com/docs/v1/lib/FileEncoding.htm
   Set file.encoding = "UTF-8-RAW"

   # Read the first 6 characters
   # Read(N_CHARS, SKIP_BYTES, FROM)
   #   N_CHARS = Number of characters
   #   SKIP_BYTES = Skip N bytes before reading
   #   FROM = 0 (Beginning of the file) - Default,   2 (End of the file)
   Msg "CHARs" with file.Read(6)


   # Read the file but in Hexadecimal
    
   # Read the first 5 bytes in hexadecimal
   # ReadHex(N_BYTES, SKIP_BYTES, FROM)
   #   N_BYTES = Number of Bytes
   #   SKIP_BYTES = Skip N bytes before reading
   #   FROM = 0 (Beginning of the file) - Default,   2 (End of the file)
   Msg "HEX" with file.ReadHex(5)

   # If a limit is not specified it will read the entire file
   Msg "ALL HEX" with file.ReadHex()

   # ReplaceHex(hexSearch, hexReplace, n, chunkSize, offset)
   #  hexSearch = Hexadecimal string to search
   #  hexReplace = New Hexadecimal String
   #  n = Limit the number of replacements or else any match will be replaced
   #  chunkSize = Number of bytes that are read/transferred until reaching the end of the file when searching/replacing (Default 4096)
   #  offset = Skip N bytes. That is, these Bytes will be included directly in the final file without additional processing. Always start from the file header        
   
   # If replacement is not specified, it will simply remove the searched hexadecimal string
   # Returns the number of replacements made
   Set NUMBER = file.ReplaceHex("EFBBBF")
   if NUMBER
      Msg "HEX PATCH" with "%NUMBER% replacements were made.\n\nThe BOM (Windows) was removed from the text file!"
  
   Set file =
   


   # Create a ZIP file using WriteRaw
   Set zip = $(New File with "test.zip")
   Set zip.encoding = "UTF-8-RAW"
   # Ensure file deletion
   zip.Delete()
   # WriteRaw method will by default transform the string to binary (Considering the specified encoding) and perform the writing
   zip.WriteRaw("PK" . Chr(5) . Chr(6))  # Start ZIP header
   # Terminate the header by writing 18 additional NULL bytes
   # If a String to be transformed is not specified, it is still possible to specify a number of Bytes and what each one should be filled with.
   # In this example: Write 18 bytes filled with 0 (NULL)
   zip.WriteRaw("",18,0)
   Set zip =

   # Create a ZIP (Simplified way) 
   Set zip2 = $(New File with "test2.zip")
   Set zip2.encoding = "UTF-8-RAW"  
   Set zip2.content = ("PK" . Chr(5) . Chr(6))   # Start ZIP header and ensure replacement of all contents
   # Terminate the header by writing 18 additional NULL bytes
   zip2.WriteRaw("",18,0)
   Set zip2 =

   





   

   
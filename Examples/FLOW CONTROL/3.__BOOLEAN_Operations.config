:MAIN
   # --------------BASIC--------------------
   Set NUMBER = 5
   Set STRING = "Huh?"
   
   # Although it is possible to nest multiple IFs to satisfy various conditions
   If (NUMBER=5)
      If (STRING="Huh?")
         Msg "CHECK" with "TRUE!"
   
   # Boolean Operations facilitate the union of several conditions in the same conditional block
   If (NUMBER=5) AND (STRING="Huh?")
         Msg "CHECK" with "TRUE!"
         
   # This simplicity/cleanliness of writing is also rewarded in faster processing
   If (NUMBER=10 AND STRING="IGNORE ME") OR (NUMBER=5 AND STRING="Huh?")
		 Msg "CHECK" with "TRUE!"
   
   # It is possible to use the result of a function as a condition
   # It will be TRUE whenever the function returns some value different from 0 or NULL (Empty).
   Set COUNT = 0
   While $(Question "TEST" with "Continue?")
      COUNT++
   Msg "WHILE" with "%COUNT% iterations were made in the While loop"

   # One more example that will store the sum of all numbers entered, as long as INPUT is a valid number.
   Set TOTAL = 0
   Set INPUT = 0
   While $(isNumber INPUT)
       Set TOTAL = (TOTAL + INPUT)
       Set INPUT = $(Input "Enter a number:")
   Msg "RESULT" with "The sum of all the numbers entered is: %TOTAL%"
   
   #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   # SOMETHING VERY IMPORTANT TO CONSIDER
   #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   #
   #   DinoCode's Expression Evaluator works with Reverse Polish (POSFIX) notation.
   #      
   #      Programmer's expression:             A + B
   #      How the Evaluator formats it:        A B +
   #   
   #   This ensures a fairly adequate optimization to work comfortably BUT it can bring confusion, especially with Functions and Boolean Operations.
   #
   #      Programmer's expression:             $(MyFunc) AND $(Myfunc)
   #      How the Evaluator formats it:        $(MyFunc) $(Myfunc) AND
   #   
   #   THERE IS NO exact SHORT CIRCUIT as in other languages. Generally when "A" is TRUE, and the next boolean operator is "AND" the short circuit immediately stops the evaluation and considers the entire operation as TRUE.
   #   BUT in DinoCode this is not necessarily the case, as "A" and "B" are positioned before the logical operator "AND" implies that these will be resolved initially REGARDLESS of their operator.
   #
   #   - So, DinoCode will resolve all "AND / OR"s even if one has already been TRUE/FALSE?
   #        NO, but at least the two expressions joined with the AND / OR operator will ALWAYS be resolved, before stopping the evaluation
   #
   #  NOTE: Although in reverse Polish notation Parentheses are usually ignored, in DinoCode these are respected, expressions in parentheses have their own prior resolution
   
   # It is inevitable that the first two Expressions will be resolved even if the first one is already TRUE
   If $(Question with "Yes?") OR $(Question with "Yes??") OR $(Question with "Yes???")
      Msg with "YEAH"
   
   
   

:MAIN
    # In many languages the Index indicates how many positions to create within the Array
    # But in DinoCode the Arrays are more like Objects, where the "Array" can grow without having to manually increase its size
    #
    #
    # 	- When an Index is specified (Ex: MyArray[5]) 5 blank positions are NOT created
    #  		Instead only an Object is created that even allows defining a value in a higher position such as MyArray[10]
    #   - Even so, specific methods such as Push(), MaxIndex(), RemoveAt() and more
    #   	are designed to work with an Object that simulates an Array, they will respect the defined Index    
    
    # Create a completely blank Array (Without any initial position)
    Set MyArray = $(Array)
    
    # Create a blank Array (But start with an Index of 5)
	Set MyArray[5]

    # Create an Array of 3 elements
    # If more than 1 element is assigned, an Array is automatically generated with each element in its respective position.
    Set Array = "First" "Second" "Third"
    
    Msg with Array[2]          # Second

    # Stack more elements by calling the Push() method
	Array.Push("Fourth")
	
	# It is also possible to assign a value to a specific position in the Array
	Set Array[5] = "Fifth"
	
    Msg with Array[5]          # Fifth
    
    # Another form of syntax using dot notation
    # When assigning a new Array to an element of an Array, a two-dimensional array will be created
	Set Array.6 = "New item 1" "New item 2" "New item 3"
	
	# Dot notation is elegant and convenient when traversing an extensive tree of information
	Msg with Array.6.3   # New item 3
	
	# Get the total number of elements of the Array added in element 6 of the Root Array
	Msg with Array.6.MaxIndex()  # 3 elements
	
	# Get the total number of elements (Root Array)
	Msg with Array.MaxIndex()  # 6 elements



    # Create an Object with keys associated with values
	Set OBJECT = $(Object "KEY" "Good morning" "KEY2" "Good afternoon")
	
	Msg with OBJECT.KEY        # Good morning

    Msg with OBJECT.KEY2       # Good afternoon

    # Associate a new key
    Set OBJECT.KEY3 = "Good Night"

    # Get the total number of elements
	Msg with OBJECT.Count()    # 3 elements
		



:MAIN    
    #----------------------Array Function--------------------------
    # Create a completely blank Array (Without any initial INDEX)
    Set MyArray = $(Array)
    
    # The Array function can also directly include the elements in the generated Array
    Set MyArray = $(Array "First" "Second" "Third")
    
    Msg "MyArray" with MyArray[1]          # First
    
    
    #--------------------------SET---------------------------------
    # The "SET" declaration action includes native support for managing and creating Arrays.
    
    # In DinoCode, Array Indexes always start at 1
	# So, declaring an Array that starts at an INDEX = 0 is similar to having it "Without any initial INDEX"
	Set Array[0]
    
    # Create a blank Array (But start with an INDEX of 5)
	Set Array[5]
	
	# If you try to assign a value to a non-existent Array, it will be created automatically	
	Set Array_[1] = "First"
	
	Msg "Array_" with Array_[1]          # First

    # Create an Array of 3 elements
    #    If more than 1 element is assigned, an Array is automatically generated with each element in its respective position.
    #    This type of declaration may be more optimal than using the Array function, since the information is assigned directly.
    Set Array = "First" "Second" "Third"
    
    Msg "Array" with Array[3]          # Third

    # Stack more elements by calling the Push() method
	Array.Push("Fourth")
	
	Msg "Array" with Array[4]          # Fourth
	
	# It is also possible to assign a value to a specific position in the Array
	Set Array[5] = "Fifth"
	
    Msg "Array" with Array[5]          # Fifth
    
    # The notation with Brackets considers that its internal content is an Expression to be resolved
    # So, it is possible to construct the KEY directly or make Reference to Variables
    Set X = 5
    
    Msg "Array" with Array[X]          # Fifth
    
    Set Array[X + 1] = "Sixth"
	
	Msg "Array" with Array[X + 1]      # Sixth
    
    # Another form of syntax using Dot notation
    # Dot notation does NOT support direct expressions such as Brackets [ Expression ].
    # Instead, it is focused on simple and fast writing to traverse large trees of information.
    Set Array.7 = "Seventh"
    
    Msg "Array" with Array.7           # Seventh
    
    # When assigning a new Array to an element of an Array, a two-dimensional array will be created
	Set Array[8] = "New item 1" "New item 2" "New item 3"
	
	# Dot notation is elegant and convenient when traversing an extensive tree of information
	Msg "Array[8]" with Array.8.3   # New item 3
	
	# The method call (Ex: MaxIndex()) is exclusive to dotted notation
	# Get the total number of elements of the Array added in element 8 of the Root Array
	Msg "Array[8]" with Array.8.MaxIndex()  # 3 elements
		
	# Get the total number of elements (Root Array)
	Msg "Array" with Array.MaxIndex()  # 8 elements

